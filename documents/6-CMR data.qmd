---
title: "6-CMR formatting"
author: "Aurore Ponchon"
format: html
editor: visual
---

## 1- Loading individual data and checking monitoring effort

We clearly see a difference in monitoring effort from 2001

```{r}
#| echo: false
#| message: false
#| warning: false


library(here)
library(tidyverse)
library(gridExtra)

source(here::here("R","correct_translocations_cmr.R"))
source(here::here("R","get_covariates.R"))

 
load(here::here("data","NewlyCreatedData","data_clean_long_final.RData"))
bad<-c("?","T0","IN","?-1","?-2","?-3","FT","?-4","?-5","?-6")


#Monitoring effort over years based on the cuont of individuals
data.clean.final %>% 
   dplyr::filter(!GLT %in% bad) %>% 
  group_by(Year) %>% 
   summarize(n = n_distinct(GLT)) %>% 
  ggplot(., aes(x=Year,y=n)) +
  geom_point() +
  geom_line() +
  labs(y="Nb of unique individuals observed per year") +
  scale_x_continuous(limits=c(1988,2023),
                     breaks=seq(1990,2020,5),
                     expand=c(0.001,0.001))+
  scale_y_continuous(limits=c(0,1000),
                     breaks=seq(0,1000,200),
                     expand=c(0.001,0.001))

#Monitoring effort over years based on individuals
data.clean.final %>% 
  dplyr::filter(!GLT %in% bad) %>% 
  group_by(Year) %>% 
  summarize(n = n_distinct(Group)) %>% 
  ggplot(., aes(x=Year,y=n)) +
  geom_point() +
  geom_line() +
  labs(y="Nb of groups observed") +
  scale_x_continuous(limits=c(1988,2023),
                     breaks=seq(1900,2020,5),
                     expand=c(0.001,0.001))+
  scale_y_continuous(limits=c(0,120),
                     breaks=seq(0,120,20),
                     expand=c(0.001,0.001))


data.clean.final %>% 
  dplyr::filter(!GLT %in% bad) %>% 
  group_by(GLT,Year) %>% 
  dplyr::count() %>% 
  ggplot(., aes(x=Year,y=n)) +
  geom_point() +
  labs(y="Nb of observations per year for each individuals") +
  scale_x_continuous(limits=c(1988,2023),
                     breaks=seq(1900,2020,5),
                     expand=c(0.001,0.001))+
  scale_y_continuous(limits=c(0,12),
                     breaks=seq(0,12,2),
                     expand=c(0.001,0.001))

#extract duplicated groups within years
# dups<-sum.up %>% 
#   group_by(GLT,Year) %>% 
#   dplyr::mutate(MaxCount=ifelse(n==max(n),1,0),
#                 MaxState=ifelse(State==max(State),1,0)) %>% 
#       filter(n() > 1)  %>% 
#      dplyr::mutate(Duplicated=1)
    # write.table(., file=here::here("Data","NewlyCreatedData","Duplicated_groups_within_years.csv"),
    #               quote=F,row.names=F ,sep=";")


#Load file to remove duplicated groups for individuals within the same year
dups.gp<-read.csv(here::here("data","NewlyCreatedData",
                             "Duplicated_groups_within_years_corrected.csv"),
                  header=T,
                  sep=";") %>% 
  dplyr::select(GLT,Year, Group,n,Duplicated,ToRemove)

#select groups with the most of observations over years (> 5 obs if <2022)
nb.gp.obs<-read.csv(here::here("data","NewlyCreatedData",
                             "Nb_obs_gp.csv"),
                  header=T,
                  sep=";") %>% 
 # dplyr::filter(Duration >6 & N>4 & !is.na(Group)) %>% 
  dplyr::select(Group)



```

# Create a subset with adults, sex and well observed groups over years

```{r}

# sum.up<-data.clean.final %>% 
#    dplyr::filter(!GLT %in% bad) %>% 
#   dplyr::filter(Disp!=1 & Death=="0" & Solo=="0") %>% 
#   dplyr::filter(!is.na(SexOK)) %>%  #get correct sex
#    dplyr::filter(IdadeOK=="AD") %>% #get only adults
# #  dplyr::filter(!is.na(IdadeOK)) %>% 
#   dplyr::filter( Year < 2008 & 
#                   # GLT %in% unique(data.clean.final$GLT
#                   #                 [data.clean.final$UMMPs=="Uniao I" |
#                   #                  data.clean.final$UMMPs=="Poco das Antas" |
#                   #                     data.clean.final$UMMPs=="Imbau II" |
#                   #                       data.clean.final$UMMPs=="Imbau I" |
#                   #                  data.clean.final$Group=="LB" | 
#                   #                  data.clean.final$Group=="EB" |
#                   #                  data.clean.final$Group=="EX" |
#                   #                     data.clean.final$Group=="AX2"])) %>% 
#     GLT %in% unique(data.clean.final$GLT
#                                   [data.clean.final$UMMPs=="Aldeia I" |
#                                    data.clean.final$UMMPs=="Aldeia II"])) %>% 
#   #filter(!Group=="BV")
#   
#     dplyr::arrange(DateObs) %>% 
#   group_by(GLT,Year,UMMPs,Group,SexOK,IdadeOK) %>% 
#   dplyr::count(Year) %>% 
#    dplyr::mutate(Female=ifelse(SexOK=="F","1","0"),
#                  Male=ifelse(SexOK=="M","1","0")) %>% 
#   ungroup()
# 
# length(unique(sum.up$GLT))  #1245 with correct known sex; 1347 including undefined sex
# #
# 
# 
# #filter nb of obs and group duplicates
# sum.up.correct<-sum.up %>% 
#   dplyr::filter(Group %in% nb.gp.obs$Group) %>%  #5978 obs
#   left_join(dups.gp,by=c("GLT","Year","Group")) %>% 
#   dplyr::mutate(ToRemove = replace_na(ToRemove, 0)) %>% 
#   dplyr::filter(ToRemove==0 ) %>% 
#   dplyr::select(GLT,Year,Group,Female,Male) %>% 
#  # dplyr::select(GLT,Year,Group,Juvenile,Subadult,Adult) %>% 
#    dplyr::mutate(State="1")
# 
# #get the wide table
# distinct.sum.up<-sum.up.correct %>% 
#  correct_translocation_cmr() %>% 
#   group_by(Year,GLT) %>% 
#       distinct() %>% 
#   dplyr::mutate(State="1") %>% 
#       arrange(Year,GLT) %>% 
#   pivot_wider(id_cols=c(GLT,Male,Female),
#             #  id_cols=c(GLT,Juvenile,Subadult,Adult),
#               names_from=Year,
#               names_prefix="O",
#                values_from=State,
#                values_fill="0")  %>% 
#      as.data.frame(.) 
# 
# 
# #file<-"CMR_1state_AD_UniaoI_PDA_ImbauI_II_LB_EB_EX_AX2_2009-2022_update"
# file<-"CMR_3states_AD_Sex_AldeiaI_II_1989-2007" 
#  
#    write.table(distinct.sum.up, file=here::here("data", 
#                                                 "NewlyCreatedData", 
#                                                 "CMR", 
#                                                 paste0(file,".csv")),
#                  quote=F,
#                  row.names=F ,
#                  sep=";",
#                  col.names=T)
# 
# 
# colNamesObs = colnames(distinct.sum.up)[4:ncol(distinct.sum.up)] #when sex included
# #colNamesObs = colnames(distinct.sum.up)[5:ncol(distinct.sum.up)] #when stage is included
# 
# 
# 
# distinct.sum.up$Obs = apply(distinct.sum.up[, colNamesObs, drop = F], 
#                               MARGIN = 1, FUN = function(i) paste(i, collapse = ""))
# 
# format<-distinct.sum.up %>% 
#   dplyr::select(Obs) %>% 
#   # dplyr::mutate(Juv=distinct.sum.up$Juvenile,
#   #               Subadult=distinct.sum.up$Subadult,
#   #   Adult=paste0(distinct.sum.up$Adult," ;"))
#   dplyr::mutate(Female=distinct.sum.up$Female,
#                 Male=paste0(distinct.sum.up$Male," ;"))
# 
# 
#  write.table(format, file=here::here("CMR", "data", 
#                                      paste0(file,".inp")),
#                  quote=F,
#              row.names=F ,
#                  sep=" ",
#                  col.names=F)
 
```

# Create a dataset with 3 states with adults

```{r}
#select all individuals with valid observations
sum.up<-data.clean.final %>% 
   dplyr::filter(!GLT %in% bad) %>% 
  dplyr::filter(Disp!=1 & Death=="0" & Solo=="0") %>% 
  dplyr::filter(!is.na(Group)) %>% 
  dplyr::filter(!is.na(SexOK)) %>%  #get correct sex
   dplyr::filter(IdadeOK=="AD") %>% #get only adults
#  dplyr::filter(!is.na(IdadeOK)) %>% 
   dplyr::filter( Year > 2009 & 
                  GLT %in% unique(data.clean.final$GLT
                                  [data.clean.final$UMMPs=="Uniao I" |
                                   data.clean.final$UMMPs=="Poco das Antas" |
                                      data.clean.final$UMMPs=="Imbau II" |
                                        data.clean.final$UMMPs=="Imbau I" |
                                   data.clean.final$Group=="LB" |
                                   data.clean.final$Group=="EB" |
                                   data.clean.final$Group=="EX" |
                                      data.clean.final$Group=="AX2"])) %>%
                    # GLT %in% unique(data.clean.final$GLT
                    #                [data.clean.final$UMMPs=="Aldeia I" |
                    #                data.clean.final$UMMPs=="Aldeia II"])) %>%
    dplyr::arrange(DateObs) %>% 
  group_by(GLT,Year,UMMPs,Group,SexOK,IdadeOK) %>% 
  dplyr::count(Year) %>% 
   dplyr::mutate(Female=ifelse(SexOK=="F","1","0"),
               Male=ifelse(SexOK=="M","1","0")) %>% 
  ungroup()

length(unique(sum.up$GLT))  #1245 with correct known sex; 1347 including undefined sex

levels(sum.up$UMMPs) <- c(levels(sum.up$UMMPs), "out")
sum.up$UMMPs[which(is.na(sum.up$UMMPs))]<-"out"


#filter nb of obs and group duplicates
sum.up.correct<-sum.up %>%
  dplyr::filter(Group %in% nb.gp.obs$Group) %>%  #5978 obs
  left_join(dups.gp,by=c("GLT","Year","Group")) %>%
  dplyr::mutate(ToRemove = replace_na(ToRemove, 0)) %>%
  dplyr::filter(ToRemove==0 ) %>%
 # dplyr::select(GLT,Year,Group,UMMPs,Male,Female) %>%
   dplyr::mutate(State=0) %>%
   correct_translocation_cmr()  %>%
  distinct() %>%
  dplyr::mutate(UMMPs=as.character(UMMPs)) %>% 
  arrange(GLT,Year)

# xx<-sum.up.correct %>% 
#   group_by(GLT,Group) %>%
#  dplyr::summarise(GP = n()) %>% 
#    group_by(GLT) %>% 
#    dplyr::filter(n()>1) %>% 
#   distinct(GLT)   #73 individuals which have dispersed at least once; 
#20 which changed region

ids<-unique(sum.up.correct$GLT)

#a<-127

for (a in 1:length(ids)){
  row.id<-which(sum.up.correct$GLT==ids[a])
  
  temp<-sum.up.correct[row.id,]
  
gp<-unique(temp$Group)
ummp<-unique(temp$UMMPs)

sum.up.correct$State[which(sum.up.correct$GLT==ids[a] & 
                           sum.up.correct$Group==gp[1])]<-1


if(length(gp)>=2 & length(ummp)==1){
  sum.up.correct$State[which(sum.up.correct$GLT==ids[a] & 
                           sum.up.correct$Group %in% gp[2:length(gp)])]<-2}
  
 if(length(gp)==2 & length(ummp)==2){ 
  sum.up.correct$State[which(sum.up.correct$GLT==ids[a] & 
                           sum.up.correct$Group==gp[2])]<-3}
  
  
if(length(gp)>2 & length(ummp)>=2){ 
  sum.up.correct$State[which(sum.up.correct$GLT==ids[a] & 
                               sum.up.correct$Group!=gp[1] & 
                               sum.up.correct$UMMPs !=ummp[1])]<-3
  
  sum.up.correct$State[which(sum.up.correct$GLT==ids[a] & 
                               sum.up.correct$Group!=gp[1] & 
                               sum.up.correct$UMMPs == ummp[1])]<-2}

for (b in row.id[c(-1,-length(row.id))]){
  if(sum.up.correct$Group[b] == sum.up.correct$Group[b+1]){
    sum.up.correct$State[b+1]<-1
  }
  
   if(sum.up.correct$Group[b] != gp[1] & sum.up.correct$Group[b+1]==gp[1]){
    ifelse (sum.up.correct$UMMPs[b] != sum.up.correct$UMMPs[b+1],
        sum.up.correct$State[b+1]<-3,
         sum.up.correct$State[b+1]<-2)
    }
}
}

distinct.sum.up<-sum.up.correct %>% 
 correct_translocation_cmr()  %>% 
  dplyr::select(Year,GLT,Group,Male,Female,State ) %>% 
  group_by(GLT,Year,Group) %>% 
   slice_min(State) %>% 
  ungroup() %>% 
  distinct(Year,GLT,Group,State,Male,Female) %>% 
  arrange(Year,GLT) 

distinct.sum.up.short<-distinct.sum.up %>% 
  pivot_wider(id_cols=c(GLT,Male,Female),
              names_from=Year,
              names_prefix="Obs",
               values_from=State,
              values_fill = 0) 
 
distinct.sum.up.gp<-distinct.sum.up %>% 
  pivot_wider(id_cols=c(GLT,Male,Female),
              names_from=Year,
              names_prefix="Obs",
               values_from=Group,
              values_fill = NA) 


file<-"3states_AD_SEX_UniaoI_PDA_ImbauI_II_LB_EB_EX_AX2_2010-2022_corrected"
#file<- "CMR_3states_AD_Sex_AldeiaI_II_2010-2022_corrected"
 
   # write.table(distinct.sum.up.short, file=here::here("data", 
   #                                              "NewlyCreatedData", 
   #                                              "CMR", 
   #                                              paste0(file,".csv")),
   #               quote=F,
   #               row.names=F ,
   #               sep=";",
   #               col.names=T)
   # 

colNamesObs = colnames(distinct.sum.up.short)[4:ncol(distinct.sum.up.short)] #when sex included
#colNamesObs = colnames(distinct.sum.up)[2:ncol(distinct.sum.up)] 



distinct.sum.up.short$Obs = apply(distinct.sum.up.short[, colNamesObs, drop = F], 
                              MARGIN = 1, FUN = function(i) paste(i, collapse = ""))

format<-distinct.sum.up.short %>% 
  dplyr::select(Obs, Male, Female) %>% 
  dplyr::mutate(Sex=";")


 # write.table(format, file=here::here("CMR", "data", 
 #                                     paste0(file,".inp")),
 #                 quote=F,
 #             row.names=F ,
 #                 sep=" ",
 #                 col.names=F)
 # 

```

# Plotting survival for 2011-2022 (old)

```{r}

library(xlsx)

param<-read.xlsx(here::here("CMR",
                           "models",
                           "3states_AD_SEX_UniaoI_PDA_ImbauI_II_LB_EB_EX_AX2_2010-2022_corrected",
                           "s(t)psi(2T)p(f).xls"),
                sheetName="Reduced Set of Parameters", 
                header=T)  %>% 
  dplyr::filter(Parameters=="S" & Step==1) %>% 
   # dplyr::mutate(Sex=rep(c("Male","Female"),each=12),
   #               Year=c(seq(2010.95,2021.95,1),seq(2011.05,2022.05,1)))
   dplyr::mutate(Year=seq(2011,2022,1))

annotation <- data.frame(
   x = 2018.1,
   y = 0.95,
   label = c("Yellow fever\noutbreak"))
  
#col<-brewer.pal(5,"PuOr")[c(2,5)]
ss<-ggplot(param,aes(Year,Estimates)) +#  ,group=Sex)) +
    geom_rect(aes(xmin = 2016.8, xmax = 2019.4, ymin = 0.6, ymax = 1),
            color="red",fill="pink",
            alpha=0.1) +
  geom_point()+#aes(color=Sex,shape=Sex)) +
  geom_line()+#aes(color=Sex,linetype=Sex)) +
  geom_errorbar(aes(ymin=Estimates-SE., 
                    ymax=Estimates+SE.), #color=Sex), 
                    width=.1,
                    position=position_dodge(0.05),show.legend=F)+
  
  scale_x_continuous(limits=c(2010.5,2022.5),breaks=seq(2011,2022,1),
                     expand=c(0.001,0.001)) +
  scale_y_continuous(limits=c(0.6,1),breaks=seq(0.6,1,0.05),
                     expand=c(0.001,0.001)) +
  geom_text(data=annotation, aes( x=x, y=y, label=label),                  
          fontface="bold" ) +
  
  labs(x="",
       y="Survival probability")+
  theme_bw()+
#  scale_color_manual(values=col)+
  theme(legend.title=element_blank(),
        panel.grid.minor = element_blank())

print(ss)

tiff(filename=here::here("outputs","Survival_2011_2022_s(t)psi(2T)p(f).tiff"),
     width=3000, 
     height=1500,
     res=400,
     compression="lzw")
print(ss)
dev.off()






```

# Plotting survival for 2011-2022 with cohorts

```{r}

library(viridis)

# param<-read.table(here::here("CMR",
#                            "models",
#                            "3states_AD_NoSex_UniaoI_PDA_ImbauI_II_LB_EB_EX_AX2_2010-2022_corrected_cohort",
#                            "s(c.t)psi(2T)p(2f)_best.csv"),
#                   sep=";",
#                 header=T)  %>% 

param<-read.table(here::here("CMR",
                           "models",
                           "3states_AD_NoSex_UniaoI_PDA_ImbauI_II_LB_EB_EX_AX2_2010-2022_corrected_cohort",
                           "s(c2.t)psi(2T)p(2f)_best_final.csv"),
                  sep=";",
                header=T)  %>%
  dplyr::mutate(group=as.factor(group),
                Year=ifelse(group=="1", year-0.05,year+0.05))

annotation <- data.frame(
   x = 2018.1,
   y = 0.45,
   label = c("Yellow fever\noutbreak"))
  

ss<-ggplot(param,aes(year, Estimates ) ,group=group) +
  geom_rect(aes(xmin = 2016.8, xmax = 2019.4, ymin = 0.39, ymax = 1.02),
            color="grey",fill="grey95",
            alpha=0.8) +
  geom_point(aes(color=group,shape=group), show.legend = F) +
  geom_line(aes(color=group, linetype=group), show.legend = F) +
  scale_color_viridis(option="D",
                      discrete = T, 
                      end=0.95) +
  geom_errorbar(aes(ymin=Estimates-SE, 
                    ymax=Estimates+SE, color=group), 
                    width=.1,
                    position=position_dodge(0.05),show.legend=F) +
  
  scale_x_continuous(limits=c(2010.5,2022.5),breaks=seq(2011,2022,1),
                     expand=c(0.001,0.001)) +
  scale_y_continuous(limits=c(0.39,1.02),breaks=seq(0.4,1,0.05),
                     expand=c(0.001,0.001)) +
  geom_text(data=annotation, aes( x=x, y=y, label=label),  
          fontface="bold" ) +
  labs(x="",
       y="Survival probability")+
  theme_bw()+
#  scale_color_manual(values=col)+
  theme(legend.title=element_blank(),
        panel.grid.minor = element_blank())

print(ss)

tiff(filename=here::here("outputs","Survival_2011_2022_s(2cohort)psi(2T)p(f).tiff"),
     width=3000, 
     height=1500,
     res=400,
     compression="lzw")
print(ss)
dev.off()


```

# Creating covariates with raw dataset

```{r}
load(here::here("data","NewlyCreatedData","Landscape raster","Rasters",
                "LandUseStack.RData"))

load(here::here("data","NewlyCreatedData","Landscape raster","Rasters",
                "TotalSizeArea.RData"))

source(here::here("R","calculate_patch_size.R"))
# totsizearea<-totsizearea %>% 
#   dplyr::filter(Year > 2009) %>% 
#   dplyr::select(Year, UMMPs, Group,  Size) 
#  dplyr::mutate("SizeCat"=ifelse(Size<15000,"small","big"))


gp.size<-get_group_size(data.clean.final)
dist<-get_distance()
 patchsizeterr<-get_patch_size(package="terra") 
# save(patchsizeterr,file=here::here("data",
#                                         "NewlyCreatedData",
#                                         "Landscape raster",
#                                         "Rasters",
#                                         "PatchSizeterra.RData"))
#patchsizeland<-get_patch_size(package="landscapemetrics")
# save(patchsizeland,file=here::here("data",
#                                         "NewlyCreatedData",
#                                         "Landscape raster",
#                                         "Rasters",
#                                         "PatchSizeLandscp.RData"))

# load(here::here("data","NewlyCreatedData",
#                                         "Landscape raster",
#                                         "Rasters",
#                                         "PatchSizeterra.RData"))
# 
# load(here::here("data","NewlyCreatedData",
#                                         "Landscape raster",
#                                         "Rasters",
#                                         "patchsizeland.Rdata"))
# 
# patchsizeterr_df<-as.data.frame(rlist::list.rbind(patchsizeterr))
# 
# 
# gg<-ggplot(patchsizeterr_df,aes(x=Year,y=area,group=Group))+
#   geom_point()+
#   geom_line()
  
#filter data and add id count over time
data.filter<-data.clean.final %>% 
  dplyr::filter(!GLT %in% bad & Disp!=1 & Death==0 & IdadeOK=="AD" & Year > 2009) %>% 
  dplyr::arrange(DateObs, GLT) %>% 
  group_by(GLT) 
  
#get the name of all individuals observed in more than one group
dispind<-data.filter %>%
  dplyr::group_by(GLT) %>%
  dplyr::summarise(N = n_distinct(Group)) %>% 
  dplyr::filter(N >1)

data.disp<-data.filter %>% 
  left_join(., y=totsizearea, by=c("Group","UMMPs","Year")) %>% 
 # dplyr::filter(GLT %in% dispind$GLT) %>% 
  dplyr::arrange(GLT,DateObs) %>% 
  group_by(GLT) %>% 
  dplyr::mutate(FromGroup=dplyr::lag(Group),
                ToGroup=Group,
                FromRegion=dplyr::lag(Region),
                ToRegion=Region,
                FromUMMP=dplyr::lag(UMMPs),
                ToUMMP=UMMPs,
                FromPatchSize=dplyr::lag(log(Size)),
                ToPatchSize=log(Size)) %>% 
  dplyr::mutate(Transloc=ifelse(dplyr::lag(Disp==2) & 
                                  Disp==0 & 
                                  dplyr::lag(GLT)==GLT,
                                1,0)) %>% 
#  dplyr::filter(ObsOrder>1) %>%    #remove first observation
  dplyr::mutate(Change=ifelse(ToGroup != FromGroup, 1,0)) %>% 
   dplyr::filter(Transloc == 0) %>% 
   dplyr::select(Year,DateObs,GLT,SexOK,
                 FromGroup,ToGroup,FromUMMP,ToUMMP,FromPatchSize,ToPatchSize, Change) %>% 

  left_join(., y=gp.size,by=c("Year"="Year","FromGroup"="Group")) %>% 
  rename(FromGroupSize=n) %>% 
  left_join(., y=gp.size,by=c("Year"="Year","ToGroup"="Group")) %>% 
  rename(ToGroupSize=n) %>% 
  left_join(., y=dist, by=c("FromGroup"="FromGp","ToGroup" = "ToGp")) %>% 
  dplyr::filter(!is.na(Change) & !is.na(Dist) & !is.na(FromGroupSize) & !is.na(FromPatchSize) & !is.na(ToPatchSize) ) %>% 
  mutate(Outbreak=as.factor(ifelse(Year==2017 | Year==2018,"outbreak","not outbreak"))) %>% 
  mutate(GLT=as.factor(GLT),
         Dist=as.numeric(Dist)) %>% 
  as.data.frame(.)


library(lme4)
library(effects)
gg<-glmer(Change ~ Outbreak + FromGroupSize +  ToGroupSize + FromPatchSize + ToPatchSize +(1|GLT) , data = data.disp, family = binomial)
sjPlot::plot_model(gg, show.values=TRUE, show.p=TRUE)

sjPlot::save_plot(filename=here::here("outputs","GLMM","GLMM_efffect.tif"),
  width = 16,
  height = 10,
  dpi = 400,
  theme = theme_get())

ggx<-sjPlot::plot_model(gg, type="pred")

tiff(here::here("Outputs","GLMM","ToPatchSize.tif"),width=3500,height=3000,res=400)
print(ggx$ToPatchSize)
dev.off()


sjPlot::tab_model(gg, 
                  show.re.var= TRUE, 
                  pred.labels =c("(Intercept)", "Outbreak", "Emigr Group Size", "Immigr Group Size"))
effect_from <- as.data.frame(effects::effect(term= "FromGroupSize", mod= gg))
effect_to <- as.data.frame(effects::effect(term= "ToGroupSize", mod= gg))
effect_out <- as.data.frame(effects::effect(term= "Outbreak", mod= gg))


from<-ggplot(data.disp) +
  geom_point(aes (x=FromGroupSize, y=Change)) +
  geom_line(data=effect_from,aes(x=FromGroupSize, y=fit),color="blue") +
  geom_ribbon(data=effect_from, aes(x=FromGroupSize, ymin=fit-se, ymax=fit+se), 
              alpha= 0.3, fill="blue") 

print(from)
```

# Creating covariates with CMT dataset

```{r}

patchsize<-as.data.frame(vect(patchsizeterr),row.names = NULL)

data.disp<-distinct.sum.up %>% 
  left_join(., y=patchsize, by=c("Group","Year")) %>% 
 # dplyr::filter(GLT %in% dispind$GLT) %>% 
  dplyr::arrange(GLT,Year) %>% 
  group_by(GLT) %>% 
  dplyr::mutate(FromGroup=dplyr::lag(Group),
                ToGroup=Group,
                FromPatchSize=dplyr::lag(log(area)),
                ToPatchSize=log(area),
                Sex=as.factor(ifelse(Male=="1","male","female"))) %>% 
#  dplyr::filter(ObsOrder>1) %>%    #remove first observation
  dplyr::mutate(Change=ifelse(ToGroup != FromGroup, 1,0)) %>% 
  # dplyr::filter(Transloc == 0) %>% 
   dplyr::select(Year,GLT,Sex,State,
                 FromGroup,ToGroup,FromPatchSize,ToPatchSize, Change) %>% 
 dplyr::filter(!is.na(FromGroup) & !is.na(ToGroup)) %>% 
  left_join(., y=gp.size,by=c("Year"="Year","FromGroup"="Group")) %>% 
  rename(FromGroupSize=n) %>% 
  left_join(., y=gp.size,by=c("Year"="Year","ToGroup"="Group")) %>% 
  rename(ToGroupSize=n) %>% 
  left_join(., y=dist, by=c("FromGroup"="FromGp","ToGroup" = "ToGp")) %>% 
  dplyr::filter(!is.na(Change) &  !is.na(FromGroupSize) & !is.na(FromPatchSize) & !is.na(ToPatchSize) ) %>% 
  mutate(Outbreak=as.factor(ifelse(Year==2017 | Year==2018,"outbreak","not outbreak"))) %>% 
  mutate(GLT=as.factor(GLT),
         Dist=as.numeric(Dist)) %>% 
  as.data.frame(.)


library(lme4)
library(effects)
gg<-glmer(Change ~ Outbreak + FromGroupSize + ToGroupSize +  ToPatchSize + FromPatchSize + Sex + (1|GLT) , data = data.disp, family = binomial)
sjPlot::plot_model(gg, show.values=TRUE, show.p=TRUE)


sjPlot::plot_model(gg, type="pred")

```

# Monitoring effort on CMR dataset

```{r}
library(viridis)
library(gridExtra)

unique.ind<-distinct.sum.up %>% 
  group_by(Year) %>% 
   summarize(n = n_distinct(GLT)) %>% 
  ggplot(., aes(x=Year,y=n)) +
   geom_rect(aes(xmin = 2016.8, xmax = 2019.4, ymin = 0, ymax = 200),
            color="grey",fill="grey95",
            alpha=0.8) +
  geom_point() +
  geom_line() +
  labs(y="Nb of unique individuals") +
  scale_x_continuous(limits=c(2010,2022),
                     breaks=seq(2010,2022,2),
                     expand=c(0.01,0.01)) +
   scale_y_continuous(limits=c(0,200),
                      breaks=seq(0,200,50),
                      expand=c(0.001,0.001))+
    theme_classic()+
  theme(panel.grid.major = element_line())

#Monitoring effort over years based on individuals
unique.gp<-distinct.sum.up %>% 
  group_by(Year) %>% 
  summarize(n = n_distinct(Group)) %>% 
  ggplot(., aes(x=Year,y=n)) +
   geom_rect(aes(xmin = 2016.8, xmax = 2019.4, ymin = 0, ymax = 50),
            color="grey",fill="grey95",
            alpha=0.8) +
  geom_point() +
  geom_line() +
  labs(y="Nb of groups",
       tag="a)") +
  scale_x_continuous(limits=c(2010,2023),
                     breaks=seq(2010,2022,2),
                     expand=c(0.01,0.01))+
  scale_y_continuous(limits=c(0,50),
                     breaks=seq(0,50,10),
                     expand=c(0.001,0.001)) +
   theme_classic()+
  theme(panel.grid.major = element_line())



new.ind<-distinct.sum.up %>% 
  group_by(GLT) %>% 
  dplyr::summarise(MinYear=min(Year)) %>%  
    dplyr::count(MinYear) %>% 
  ggplot(., aes(x=MinYear,y=n)) +
   geom_rect(aes(xmin = 2016.8, xmax = 2019.4, ymin = 0, ymax = 100),
            color="grey",fill="grey95",
            alpha=0.8) +
  geom_point() +
  geom_line()+
  labs(y="Nb of new individuals",
       x="Year") +
  scale_x_continuous(limits=c(2010,2022),
                     breaks=seq(2010,2022,2),
                     expand=c(0.01,0.01)) +
  scale_y_continuous(limits=c(0,100),
                     breaks=seq(0,100,20),
                     expand=c(0.001,0.001))+ 
  theme_classic()+
  theme(panel.grid.major = element_line())




nb.ind.gp<-distinct.sum.up %>% 
  dplyr::group_by(Group,Year) %>% 
  dplyr::summarize(n = n_distinct(GLT)) %>% 
   dplyr::filter(Year > 2009) %>% 
  dplyr::group_by(Year) %>% 
  dplyr::summarize(Mean=mean(n),
                   SE=std.error(n)) %>% 
  ggplot(., aes(x=Year,y=Mean)) +
   geom_rect(aes(xmin = 2016.8, xmax = 2019.4, 
                 ymin = 0, ymax = 8),
            color="grey",fill="grey95",
            alpha=0.8) +
    # geom_ribbon(aes(ymin= Mean-SE, 
    #                 ymax = Mean+SE),
    #         fill="grey70",
    #         alpha=0.8) +
  geom_point(aes(),show.legend=F) +
  geom_line(aes(),show.legend=F) +
   geom_errorbar(aes(ymin=Mean-SE, 
                    ymax=Mean+SE), 
                    width=.1,
                    position=position_dodge(0.05),show.legend=F) +
  labs(y="Mean nb of ind/groups",
      tag="b)") +
   scale_x_continuous(limits=c(2010,2023),
                     breaks=seq(2010,2022,2),
                     expand=c(0.01,0.01)) +
  scale_y_continuous(limits=c(0,8),
                     breaks=seq(0,8,2),
                     expand=c(0.001,0.001)) + 
  theme_classic()+
  theme(panel.grid.major = element_line())

grid.arrange(unique.ind,unique.gp,new.ind,nb.ind.gp,
             nrow=2,ncol=2)

tiff(filename=here::here("outputs","Fig3-gp_nb.tiff"),
     width=3000, 
     height=1000,
     res=400,
     compression="lzw")
grid.arrange(unique.gp,nb.ind.gp, ncol=2)
dev.off()

temp<-data.clean.final %>% 
  dplyr::select(Year,GLT,Group,UMMPs) %>% 
  distinct(Year,Group,UMMPs)

cons.unit<-distinct.sum.up %>% 
  left_join(.,temp, by=c("Year","Group")) %>% 
  dplyr::filter(!is.na(UMMPs)) %>% 
  distinct(Year,Group,UMMPs) %>% 
  group_by(Year, UMMPs) %>% 
   summarize(n=n_distinct(Group), .groups="drop") %>% 
  ggplot(aes(x=Year,y=n))+
   geom_rect(aes(xmin = 2016.8, xmax = 2019.4, 
                 ymin = 0, ymax = 16),
            color="grey",fill="grey95",
            alpha=0.8) +
  geom_point(aes(color=UMMPs))+
  geom_line(aes(color=UMMPs)) +
  labs(x="Years",y="Number of groups")+
  scale_colour_manual(values=viridis(n=9,end=0.95),
#  scale_colour_manual(values=met.brewer(n=9,"Renoir"),
                      name="Conservation \nunit")+
  scale_x_continuous(limits=c(2010,2022),
                     breaks=seq(2010,2022,2),
                     expand=c(0.01,0.01)) +
  scale_y_continuous(limits=c(0,16),
                     breaks=seq(0,16,4),
                     expand=c(0.01,0.01)) + 
  theme_classic()+
  theme(panel.grid.major = element_line())

print(cons.unit)
```
