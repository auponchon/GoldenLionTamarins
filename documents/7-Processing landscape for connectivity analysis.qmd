---
title: "Landscape processing"
author: "Aurore Ponchon"
format: html
editor: visual
---

# 1-Import landscape layers

```{r}
#load packages
library(tidyverse)
library(here)
library(raster)
library(terra)
library(maptools)
library(fields)
library(landscapemetrics)
library(rgeos) 
library(gridExtra)
library(sf)
library(fasterize)

#load functions
source(here::here("R","create_raster.R"))
source(here::here("R","merge_ummp.R"))
source(here::here("R","fct_dilatation_erosion.R"))
source(here::here("R","fct_tessalation.R"))

id_paysage = "1990"

##############################################
## STEP 1 : LANDSCAPE PRE-PROCESSING ##
##############################################

##### 1- Import raster and shapefile layers

## Landscapes with habitat codes (file as a raster stack compiling 32 years from 1990 to 2021)

load(here::here("data","NewlyCreatedData","Landscape raster","Rasters","LandUseStack.RData"))

#Over the 31 landscapes, identify the raster with the largest surface of habitat to define patches
size<-get_largest_dilated_habitat_surface(coverStack,seuil=100)

#Largest haitat surface was reached in 2019, which is #30 in rasterSatck
largest_habitat<-coverStack[[30]]

dil_largest_hab<-dilatation_erosion(largest_habitat,seuil=100)


## Import roads and train lines
roads <- sf::read_sf(here::here("data","NewlyCreatedData","Landscape raster","SHP", 
                             "RoadsTrainUnion.shp")) %>% 
         st_set_crs(4326) %>% 
         st_transform(.,crs = st_crs(largest_habitat)) %>% 
         sf::st_crop(., y=largest_habitat) %>% 
         sf::st_buffer(.,dist=100,
                       endCapStyle="ROUND")


## Plot landscape
plot(dil_largest_hab, main = "Dilatated Landscape")
plot(roads$geometry,add=T)


#conservation units (UMMPs)
ummp<-return_complete_ummp() %>% 
  st_transform(.,crs = st_crs(largest_habitat)) %>% 
         sf::st_crop(., y=largest_habitat)
  

##### 2- Define raster features
resolution = res(largest_habitat)[1]
nb_cell_paysage = ncell(largest_habitat)
nb_lignes = nb_colonnes = sqrt(nb_cell_paysage)
cell_size = resolution * resolution
aire_tot = (nb_cell_paysage*resolution)^2



##### 3- Exclude roads before defining patches
largest_habitat_without_roads = mask(dil_largest_hab,roads, inverse=TRUE)
plot(largest_habitat_without_roads, 
     type = "classes", 
     main = "Landscape without roads",
     levels = c("Matrix", "Habitat","Roads"),
     col = c("#E2DEDE", "#0E9813","#FFFFFF"), 
     plg = list(cex = 0.7)
)


##### 5- Defining patches

if (minmax(largest_habitat_without_roads, compute=FALSE)[1]==1) { 
  #SIf value <1, assign 0
  largest_habitat_without_roads = 
    largest_habitat_without_roads-1
}
patchs = patches(largest_habitat_without_roads,
                 directions = 8, 
                 zeroAsNA=TRUE, 
                 allowGaps=FALSE)

#getting patch number
plot(patchs, main = "All patches")
# freq_patchs = freq(patchs)
# View(freq_patchs)

#get surface of each patch and define thresholds for patch size
taille_patchs <- zonal(cellSize(x=patchs, unit="m"), patchs, sum, as.raster=TRUE)
seuil_mini = 200000          # 22500 #m²
seuil_maxi =  2300000        #250000 #m² = 25ha

## Only keep patches which surface is lower than the minimal one. Keep object for the cost layer
patchs_inf_seuil_mini <- ifel(taille_patchs > seuil_mini, NA, patchs)
plot(patchs_inf_seuil_mini, main = "Too small patches")
#Check that we select the right patches
#max(freq(patchs_inf_seuil_mini)[3])

#replace non NA values (=habitat) by 1 
patchs_inf_seuil_mini[patchs_inf_seuil_mini > 0] <- 1


## Raster with patches which surface is between min and max threshold surfaces 
patchs_superieur_seuil_mini <- ifel(taille_patchs < seuil_mini, NA, patchs)
patchs_taille_ok <- ifel(taille_patchs > seuil_maxi, NA, patchs_superieur_seuil_mini)

plot(patchs_taille_ok, 
     main = "Single patches with right surfaces")

#Check selected patches by checking frequences
#min(freq(patchs_taille_ok)[3])
#max(freq(patchs_taille_ok)[3])
id_max = minmax(patchs_taille_ok, compute=TRUE)[2]


## Création d'un raster avec les patchs dont la surface est supérieure au max --> tessalation
patchs_superieur_seuil_maxi <- ifel(taille_patchs < seuil_maxi, NA, patchs)

plot(patchs_superieur_seuil_maxi, 
     main = "Too big patches")

#VCheck selected patches by checking frequences
#min(freq(patchs_superieur_seuil_maxi)[3])


#Histogramm of surface patches : 
taille_patches_m2 = freq(patchs)[3]*cell_size
hist(taille_patches_m2$count)


##### 6- Tessalation on biggest patches
r=patchs_superieur_seuil_maxi
n = 100000

# Tirage des points aléatoires
points_aleatoire = tirage_pts_aleatoires(r,n)

#Tesselation
x = points_aleatoire[,1]
y = points_aleatoire[,2]
tesselation_aleatoire <- deldir(x, y)


#Define new patches
new_patchs_aleatoire = decoupage_patchs(tesselation_aleatoire,id_max)

par(mfrow=c(1,1))
plot(new_patchs_aleatoire, main = "PATCHES AFTER RANDOM TESSELATION")

#Check that patch size is what is expected 
val = verif_decoupage(new_patchs_aleatoire)



##### 8) Regroupement des patchs de taille OK et des patchs découpés précédement
par(mfrow=c(1,2))
mosaic_raster_aleatoire <- mosaic(new_patchs_aleatoire, patchs_taille_ok)
plot(mosaic_raster_aleatoire, 
     main = "Landscape with random tesselation")


```

# 
