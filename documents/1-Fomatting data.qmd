---
title: "Extracting dispersing events"
author: "Aurore Ponchon"
format: html
editor: visual
---

## 1- Formatting data to constitute a full long dataset

Data are stored in .xls or .xlsx files. They consist of blocks of data encompassing groups from the same region. A first formatting of the tables is made directly within the excel files to ensure that each group name is the first line of a block. Region names are isolated before blocks so that they are automatically assigned to following blocks.

Duplicates are checked in group and region names.

```{r}
#| echo: false
#| message: false
#| warning: false

library(here)
library(tidyverse)
library(readxl)
library(writexl)
library(purrr)
library(conflicted)
conflict_prefer("mutate", "dplyr")


source(here::here("R","extract_functions.R"))
source(here::here("R","revalue_variables.R"))

#identify particular status in Grupo column
dispersers<-c("OUT","Out","out","disp","Disp","DISP","OUT PT","Grace-disp
","Alex-disp","28/01/13")
solo<-c("Sozinha","Sozinho","sozinha","sozinho","SOZINHA","soz.","SOZINHO",
        "Expulsa","Soz.")
dead<-c("DEAD","died","Died","DIED")
names<-c("chiquinho","Georgia","Luisa","Antônia","saiu","Luana",
         "Camilo","André")
#list all files
files<-list.files(here::here("data","RawData","Groups"),
                  pattern = "xls",recursive=T,
                  full.names = T)

#function to read each file separately

# DATA<-data.frame()
# 
# for (i in 1:length(files)){
#   
#   print(i)
#   
#   xx<-extract_long_data(files[i])
#   
#   DATA<-rbind(DATA,xx)
# }

DATA<- purrr::map_dfr(files, extract_long_data )

data.clean<-DATA %>% 
  revalue_region() %>% 
  revalue_birth() %>%    #issue with FA20 (2 birth dates!!)
  revalue_stage() %>% 
   dplyr::arrange(DateObs)


sort(unique(data.clean$Region))
sort(unique(data.clean$Group))
  

#write_xlsx(data.Clean, path=here("Data","NewlyCreatedData","DAT.xlsx"))

save(data.clean,file=here::here("Data","NewlyCreatedData","all_long.RData"))


# subseto<-DATA %>% 
#   filter(Group=="DN"|
#          Group=="Fugitivo"|
#          Group=="Fusão"|
#          Group=="GM"|
#            Group=="FQL"|
#            Group=="Jaguar"|
#            Group=="ML2"|
#            Group=="MR"|
#            Group=="NA") %>% 
#   select(-Grupo)
# 
# write_xlsx(subseto,
# path=here("Data","NewlyCreatedData","check_group_Valeria.xlsx"))
```

# Selecting individuals to include in observation dataset

The dataset for capture-recapture analyses includes individuals which have been clearly identified. Dispersed individuals and dead individuals are removed, as well as non identified infants.

Duplicates are checked to make sure each GLT and tattoo correspond to only one unique individual. Duplicate individual tatoos are renamed in the code, not in the files.

```{r}

load(here("Data","NewlyCreatedData","all_long.RData"))

bad<-c("?","T0","IN","AF?","?-3")

#identify duplicates in individual names
data.clean %>%
    #dplyr::filter(Disp=="0" & Death=="0") %>% 
    dplyr::group_by(DateObs,GLT) %>%
    dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
    dplyr::filter(n > 1L & GLT!="?" & GLT!="T0" & GLT!="IN" & 
                    GLT!="FT")


data.clean %>%
    dplyr::filter(Disp=="0" & Death=="0") %>% 
    dplyr::group_by(DateObs,GLT,Tattoo) %>%
    dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
    dplyr::filter(n > 1L & GLT!="?" & GLT!="T0" & GLT!="IN")



dat<-data.clean %>% 
  dplyr::filter(Disp=="0" & Death=="0") %>% 
  dplyr::filter(GLT!="?" & GLT !="?-3" & GLT!="IN" & GLT!="FT" &
                  GLT!="T0" & Group!="?") %>% 
  dplyr::arrange(DateObs) %>% 
  dplyr::select(DateObs,Region,Group, GLT, Sexo ) %>% 
  dplyr::distinct() %>% 
  pivot_wider(names_from=DateObs,
              names_prefix="Obs",
              values_from=Region)

```
